#set($dollar="$")
#set($istree=false)
#foreach($field in $!{table.fields})
#if($!{field.name}=="parent_id")
#set($istree=true)
#end
#end
<template>
  <!--form 表单，用来显示和编辑数据 -->
  <el-dialog v-el-drag-dialog :width="dialogWidth" :title="textMap[dialogStatus]" :visible.sync="dialogFormVisible">
    <el-form ref="dataForm" :inline="true" :rules="rules" :model="temp" label-position="left" label-width="120px"
      style="width: 1000px; margin-left:10px;">
#foreach($field in $!{table.fields})
#if($!{field.name}=="remarks")
    <el-form-item label="$!{field.comment}" prop="$!{field.propertyName}">
        <el-tooltip class="item" effect="dark"
                    content="$!{field.comment}" placement="top">
        <el-input v-model="temp.$!{field.propertyName}" type="textarea" autosize style="width: 815px;" />
        </el-tooltip>
    </el-form-item>
#elseif($!{field.name}=="sort")
    <el-form-item label="$!{field.comment}" prop="$!{field.propertyName}">
        <el-tooltip class="item" effect="dark"
                    content="$!{field.comment}" placement="top">
        <el-input-number v-model="temp.$!{field.propertyName}" :precision="0" :step="1" :max="100" style="width: 305px;" />
        </el-tooltip>
    </el-form-item>
#elseif($!{logicDeleteFieldName}==$!{field.name} || $!{field.name}=="tenant_id" || $!{field.keyFlag})

#elseif($!{field.comment.indexOf("字典")}!=-1)
    <el-form-item label="$!{field.comment}" prop="$!{field.propertyName}">
        <el-tooltip class="item" effect="dark"
                    content="$!{field.comment}" placement="top">
        <el-select v-model="temp.$!{field.propertyName}" :placeholder="$!{dollar}t('table.pleaseSelect')" class="filter-item"
                   style="width: 305px;">
            <el-option v-for="item in $!{field.propertyName}Options" :key="parseFloat(item.value)" :label="parseFloat(item.label)"" :value="parseFloat(item.value)" />
        </el-select>
        </el-tooltip>
    </el-form-item>
#elseif($!{field.propertyType}=="Integer" || $!{field.propertyType}=="Long")
    <el-form-item label="$!{field.comment}" prop="$!{field.propertyName}">
        <el-tooltip class="item" effect="dark"
                    content="$!{field.comment}" placement="top">
        <el-input-number v-model="temp.$!{field.propertyName}" :precision="0" :step="1" :max="100" style="width: 305px;" />
        </el-tooltip>
    </el-form-item>
#elseif($!{field.propertyType}=="Float" || $!{field.propertyType}=="Double")
    <el-form-item label="$!{field.comment}" prop="$!{field.propertyName}">
        <el-tooltip class="item" effect="dark"
                    content="$!{field.comment}" placement="top">
        <el-input-number v-model="temp.$!{field.propertyName}" :precision="2" :step="0.1" :max="10" style="width: 305px;" />
        </el-tooltip>
    </el-form-item>
#elseif($!{field.propertyType}=="LocalDateTime")
    <el-form-item label="$!{field.comment}" prop="$!{field.propertyName}">
        <el-tooltip class="item" effect="dark"
                    content="$!{field.comment}" placement="top">
        <el-date-picker
            v-model="temp.$!{field.propertyName}"
            type="datetime"
            placeholder="选择日期时间"
            align="right"
            :picker-options="pickerOptions">
        </el-date-picker>
        </el-tooltip>
    </el-form-item>
#else
      <el-form-item label="$!{field.comment}" prop="$!{field.propertyName}">
          <el-tooltip class="item" effect="dark"
                      content="$!{field.comment}" placement="top">
        <el-input v-model="temp.$!{field.propertyName}" style="width: 305px;" />
          </el-tooltip>
      </el-form-item>
#end
#end
    </el-form>
    <div slot="footer" class="dialog-footer">
      <el-button v-waves @click="dialogFormVisible = false">{{ $!{dollar}t('table.cancel') }}</el-button>
      <el-button v-waves type="primary" @click="dialogStatus==='create'?createData():updateData()">{{ $!{dollar}t('table.confirm') }}</el-button>
    </div>
  </el-dialog>
</template>
<script>
  // 调用相应的api文件中的方法，来操纵数据
  import {
    add,
    update
  } from '@/api/system/$!{cfg.entityKey}'

  // 按钮的水波纹
  import waves from '@/directive/waves' // Waves directive
  // 引入相应的工具来处理数据转换需求
  import listQuery from '@/entitys/$!{cfg.entityKey}'
  // 引入相关utils
  import notify from '@/utils/notify'
  import elDragDialog from '@/directive/el-drag-dialog' // base on element-ui
  export default {
    // TODO:本页面的名称
    name: '$!{cfg.entityKey}-dataForm',
    components: {

    },
    directives: {
      waves,
      elDragDialog
    },
    filters: {

    },
    props: {
#foreach($field in $!{table.fields})
#if($!{field.comment.indexOf("字典")}!=-1)
         $!{field.propertyName}Options: {
            type: Array,
             default: function () {
              return []
             }
         },
#end
#end
    },
    data() {
      // 初始化整个页面用到的数据
      return {
        dialogWidth: '1000px',
        dialogFormVisible: false, // form表格对话框是否显示
        dialogStatus: '', // 当前操作的状态，控制form表单的Title,form表单submit的方法
        textMap: {
          update: this.$!{dollar}t('table.edit'),
          create: this.$!{dollar}t('table.add')
        },
        dialogPvVisible: false,
        temp: listQuery().query,
        rules: listQuery().rules,
        pickerOptions: {
              shortcuts: [{
                  text: '今天',
                  onClick(picker) {
                      picker.$emit('pick', new Date())
                  }
              }, {
                  text: '昨天',
                  onClick(picker) {
                      const date = new Date()
                      date.setTime(date.getTime() - 3600 * 1000 * 24)
                      picker.$emit('pick', date)
                  }
              }, {
                  text: '一周前',
                  onClick(picker) {
                      const date = new Date()
                      date.setTime(date.getTime() - 3600 * 1000 * 24 * 7)
                      picker.$emit('pick', date)
                  }
              }]
          }
      }
    },
    computed: {

    },
    watch: {

    },
    // 初始化所有的数据
    created() {
        this.initTreeOptions()
    },
    mounted() {
      window.onresize = () => {
        return (() => {
          this.setDialogWidth()
        })()
      }
    },
    methods: {
      initTreeOptions() {

      },
      setDialogWidth() {
        console.log(document.body.clientWidth)
        var val = document.body.clientWidth
        const def = 1000 // 默认宽度
        if (val < def) {
          this.dialogWidth = val + 'px'
        } else {
          this.dialogWidth = def + 'px'
        }
      },
      resetTemp() {
        this.temp = listQuery().query
#if($istree)
          this.temp.parentId = this.$!{dollar}parent.$!{dollar}parent.$!{dollar}parent.$!{dollar}parent.$!{dollar}refs.listTable.listQuery.query.parentId_equal
   #end
      },
      handleCreateAction() {
        this.resetTemp()
        this.dialogStatus = 'create'
          this.dialogFormVisible = true
        this.$!{dollar}nextTick(() => {
          this.$!{dollar}refs.dataForm.clearValidate()
        })
      },
      createData() {
        this.$!{dollar}refs['dataForm'].validate((valid) => {
          if (valid) {
            // 开始保存数据
            add(this.temp).then((response) => {
              if (response.code === 200) {
#if($istree)
                  this.$!{dollar}parent.$!{dollar}parent.$!{dollar}parent.$!{dollar}parent.initTreeData()
                  this.$!{dollar}parent.$!{dollar}parent.$!{dollar}parent.$!{dollar}parent.$!{dollar}refs.listTable.list.unshift(response.data)
#else
                this.$!{dollar}parent.$!{dollar}refs.listTable.list.unshift(response.data)
#end
                  this.dialogFormVisible = false
                notify.success(this)
              } else {
                notify.error(this)
              }
            })
          }
        })
      },
      handleUpdate(row) {
        this.temp = Object.assign({}, row) // copy obj
        this.dialogStatus = 'update'
          this.dialogFormVisible= true
        this.$!{dollar}nextTick(() => {
          this.$!{dollar}refs.dataForm.clearValidate()
        })
      },
      updateData() {
        this.$!{dollar}refs.dataForm.validate((valid) => {
          if (valid) {
            const tempData = Object.assign({}, this.temp)
            // 开始更新数据
            update(tempData).then((response) => {
              if (response.code === 200) {
#if($istree)
                   this.$!{dollar}parent.$!{dollar}parent.$!{dollar}parent.$!{dollar}parent.initTreeData()
                  for (const v of this.$!{dollar}parent.$!{dollar}parent.$!{dollar}parent.$!{dollar}parent.$!{dollar}refs.listTable.list) {
                      if (v.id === this.temp.id) {
                          const index = this.$!{dollar}parent.$!{dollar}parent.$!{dollar}parent.$!{dollar}parent.$!{dollar}refs.listTable.list.indexOf(v)
                                  this.$!{dollar}parent.$!{dollar}parent.$!{dollar}parent.$!{dollar}parent.$!{dollar}refs.listTable.list.splice(index, 1, tempData)
                                  break
                      }
                  }
#else
                for (const v of this.$!{dollar}parent.$!{dollar}refs.listTable.list) {
                  if (v.id === this.temp.id) {
                    const index = this.$!{dollar}parent.$!{dollar}refs.listTable.list.indexOf(v)
                    this.$!{dollar}parent.$!{dollar}refs.listTable.list.splice(index, 1, tempData)
                    break
                  }
                }
#end
                this.dialogFormVisible = false
                notify.successEdit(this)
              } else {
                notify.errorEdit(this)
              }
            })
          }
        })
      }

    }
  }

</script>
<style lang="scss" scoped>
  .el-form-item__label {
    color: rgba(0, 0, 0, 0.85);
    font-weight: 500;
  }

  .el-table th>.cell {
    color: rgba(0, 0, 0, 0.85);
    font-weight: 500;
  }

  .el-table th,
  .el-table tr {
    background-color: #fafafa;
  }

  .el-tooltip__popper{max-width:50%}
</style>
